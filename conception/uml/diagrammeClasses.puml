@startuml

hide circle
skinparam classAttributeIconSize 0
skinparam monochrome true
skinparam packageStyle rect
skinparam shadowing false



package Telco {
    package ComTelco {
        class DispatcherTelco {
            --
            + setPilotState()
            + setLogs(from:int,to:int) : Log[]
            + setLogsCount():int
            + decode()
        }

        class ProxyPilot{
        --
            + setVelocity()
            + toggleEmergencyStop()
            + askPilotState()
        }

        class ProxyLogger{
            --
            + askLogs(from:int,to:int) : Log[]
            + askLogsCount() : int
        }

        class PostmanTelco {
            --
            + readMsg()
            + sendMsg()
        }
    }

    class RemoteUI << active >> {
        myVel : VelocityVector
        myCurrentScreen : IdScreen
        currentLogsCount : int
        previousLogsCount : int
        myLogs : Log[]
        --
        + start()
        + stop()
        + toggleEmergencyStop()
        + setDir(Direction)
        + setPilotState() : PilotState
        + setLogs(from: int,to: int) : Log[]
        + setLogsCount(): int
        - translate(dir: Direction) : VelocityVector
        - displayScreen(idScreen: IdScreen)
    }
}

package Commando {
    package ComCommando {
        class ProxyRemoteUI{
            --
            + setPilotState()
            + setLogs(from: int,to: int) : Log[]
            + setLogsCount(): int
        }

        class DispatcherCommando {
            --
            + askLogs(from:int,to:int) : Log[]
            + askLogsCount() : int
            + setVelocity()
            + toggleEmergencyStop()
            + askPilotState()
            + decode()
        }

        class PostmanCommando {
            --
            + readMsg()
            + sendMsg()
        }
    }

    class Pilot << active >> {
        - currentVel : VelocityVector
        - myPilotState : PilotState
        --
        + setVelocity(vel: VelocityVector)
        + askPilotState()
        + toggleEmergencyStop()
        - sendMvt(VelocityVector)
        - hasBumped() : int
        - evaluateBump()
        - evaluateVelocity()
        - sendMvt(vel: VelocityVector)
    }

    class Robot << protected >> {
        - robot : Robot
        - sensorState : SensorState
        --
        + setWheelsVelocity(vr: int,vl: int)
        + getSpeed() : int
        + getSensorsState() : SensorState
        + hasBumped(): Boolean
    }

    class Logger << active >>{
        - myLogs : Log[]
        --
        + start()
        + stop()
        + askLogs(from: int, to: int) : Log[]
        + askLogsCount() : int
        + clear()
        + setRobotSpeed() : Speed
        + setSensorsState() : SensorsState
        - appendLog(SensorsState,Speed)
    }
}

Pilot "1"--> "1 \nmyRobot" Robot : > controls
Robot "1 \nmyRobot" <-- "1" Logger : < poll
RemoteUI "1"--> "1 \nmyPilot" Pilot: > controls
RemoteUI "1"--> "1 \nmyLogger" Logger : > poll

RemoteUI "1"--> "1" ProxyPilot
RemoteUI "1"--> "1" ProxyLogger
ProxyPilot "1"--> "1" PostmanTelco
ProxyLogger "1"--> "1" PostmanTelco
DispatcherTelco "1"--> "1" RemoteUI
PostmanTelco "1"--> "1" DispatcherTelco

Pilot "1"--> "1" ProxyRemoteUI
Logger "1"--> "1" ProxyRemoteUI
ProxyRemoteUI "1"--> "1" PostmanCommando
DispatcherCommando "1"--> "1" Pilot
DispatcherCommando "1"--> "1" Logger
PostmanCommando "1"--> "1" DispatcherCommando
@enduml
